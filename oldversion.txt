from flask import Flask, jsonify, Response 
from flask_cors import CORS
import json

app = Flask(__name__)
CORS(app)

# Load data once at startup
try:
    with open("data1.json", encoding="utf-8") as f:
        all_articles = json.load(f)

    # Generate tag list from unique keywords
    tags_seen = {}
    tags_data = []
    id_to_tag = {}

    tag_id = 1
    for article in all_articles:
        keyword = str(article.get("keywords", "")).strip()
        if keyword and keyword not in tags_seen:
            tags_seen[keyword] = tag_id
            tags_data.append({"id": tag_id, "Tag": keyword})
            id_to_tag[tag_id] = keyword
            tag_id += 1

    print("✅ Loaded existing JSON file successfully.")

except Exception as e:
    print("❌ Error loading JSON file:", e)
    all_articles = []
    tags_data = []
    id_to_tag = {}

@app.route("/")
def home():
    return "✅ Flask API is running. Use /tags, /data, or /tag/<tag_name>"

@app.route("/tags", methods=["GET"])
def get_tags():
    return Response(json.dumps(tags_data, indent=2), mimetype="application/json")

@app.route("/data", methods=["GET"])
def get_all_data():
    return jsonify(all_articles)

@app.route("/tag/<tag_name>", methods=["GET"])
def get_articles_by_tag(tag_name):
    filtered = [
        article for article in all_articles
        if str(article.get("keywords", "")).strip().lower() == tag_name.lower()
    ]
    if not filtered:
        return jsonify({"message": f"No articles found for tag '{tag_name}'"}), 404
    return jsonify(filtered)

@app.route("/tag/id/<int:tag_id>", methods=["GET"])
def get_articles_by_tag_id(tag_id):
    tag_name = id_to_tag.get(tag_id)
    if not tag_name:
        return jsonify({"message": f"No tag found with ID {tag_id}"}), 404
    return get_articles_by_tag(tag_name)

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)